import numpy as np
from matplotlib import cbook
from matplotlib.colors import LinearSegmentedColormap, ListedColormap

def rain():
    cdict = { 'colors': [(255,255,255),(210,255,254),(136,254,253),(0,198,255),(25,150,255),(60,65,255),(60,188,61),(165,215,31),(255,230,0),(255,195,0),(255,125,0),(255,0,0),(200,0,0),(212,100,195),(181,86,71),(132,0,148),(220,220,220),(180,180,180),(140,140,140),(90,90,90),(50,50,50)],
              'clevls': np.array([0,2,3,5,8,9,10,15,20,25,30,40,50,60,70,80,100,125,150,175,200]) }
    return cdict

def rain1():

    cdict = {
        'colors': [(255, 255, 255), (210, 255, 254), (136, 254, 253), (0, 198, 255), (4, 238, 236),
                   (  1, 161, 245), (  3,   0, 246), (  2, 254,   2), (1, 200,   1),
                   (  0, 145,   0), (252, 248,   3), (229, 188,   0), (254, 142, 0),
                   (252,   0,   0), (213,   0,   0), (182,   0,   0), (249, 0, 252),
                   (156,  86, 203), (254, 254, 253) ],

        'clevls': np.array([0.0, 2, 5, 8, 12, 19, 25, 37, 50, 63, 75, 100, 125, 150, 200, 250])
    }

    return cdict

# hail pallett:
def hailprob():
    #
    cdict = {
    'colors': [(235,235,235), (215, 225, 255), (181, 201, 255), (142, 178, 255),
                         (127, 150, 255), (99, 112, 248), (0, 99, 255), (0, 150, 150),
                         (0, 198, 51), (99, 235, 0), (150, 255, 0), (198, 255, 51),
                         (255, 245, 0), (255, 188, 0), (255, 85, 0), (215, 0, 0),
                         (170, 0, 0), (170, 0, 100), (240, 0, 130)],
    'clevls': np.linspace(60.,100.,19)
    }

    return cdict

def cloud():
    cdict = { 'colors': [(235,235,235), (215, 225, 255), (181, 201, 255), (142, 178, 255),
                         (127, 150, 255), (99, 112, 248), (0, 99, 255), (0, 150, 150),
                         (0, 198, 51), (99, 235, 0), (150, 255, 0), (198, 255, 51),
                         (255, 245, 0), (255, 188, 0), (255, 85, 0), (215, 0, 0),
                         (170, 0, 0)],
              'clevls': np.linspace(0.,100.,17) }
    return cdict

# wind pallett:
def wind():
    cdict = { 'colors': [(235,235,235), (215, 225, 255), (181, 201, 255), (142, 178, 255),
                         (127, 150, 255), (99, 112, 248), (0, 99, 255), (0, 150, 150),
                         (0, 198, 51), (99, 235, 0), (150, 255, 0), (198, 255, 51),
                         (255, 245, 0), (255, 188, 0), (255, 85, 0), (215, 0, 0),
                         (170, 0, 0), (170, 0, 100), (240, 0, 130), (240, 0, 160),
                         (245, 120, 190), (250, 190, 230), (255, 230, 235), (255, 251, 253)],
              'clevls': np.linspace(0.,240.,24) }
    return cdict

# sfcp pallett:
def sfcp():
    cdict = { 'colors': [(100, 0, 0), (170, 0, 0), (215, 0, 0), (255, 0, 0), (255, 30, 30), (255, 70, 70), (255, 90, 90), (255, 110, 110), (255, 135, 135), (255, 175, 175), (255, 190, 190), (255, 210, 210), (255, 230, 230), (255, 240, 240), (255, 255, 255), (240, 240, 255), (230, 230, 255), (210, 210, 255), (190, 190, 255), (175, 175, 255), (135, 135, 255), (110, 110, 255), (90, 90, 255), (70, 70, 255), (30, 30, 255), (0, 0, 255), (0, 0, 215), (0, 0, 170) ],
              'clevls': np.linspace(900.,1025.,28) }
    return cdict

# temp pallett:
def temp():
    cdict = { 'colors': [(15, 110, 140), (30, 125, 150), (50, 135, 155), (60, 150, 170), ( 85, 155, 185), (90, 170, 195), (100, 180, 195), (120, 195, 205), (135, 205, 220), (150, 210, 220), (160, 225, 240), (180, 230, 255), (10, 145, 70), (25, 155, 80), (40, 170, 85), ( 65, 170, 95), (75, 175, 105), (95, 185, 105), ( 120, 195, 110), (125, 200, 120),(150, 205, 125), (165, 220, 125), (190, 225, 135), (200, 230, 140), (220, 240, 150), (240, 240, 195), (240, 235, 140), (240, 215, 130), (245, 200, 90), (240, 175, 75),(230, 155, 60), (240, 135, 45), (225, 115, 0), (250, 80, 60), (240, 15, 105), (185, 0, 55), (125, 0, 5), (160, 100, 175) ],
              'clevls': np.linspace(6.,36.,38) }
    return cdict

# relh pallett:
def relh():
    cdict = { 'colors': [(245, 245, 245), (255, 255, 160), (254, 254, 99), (244, 244, 110), (255, 210, 35), (255, 163, 25), (255, 89, 25), (230, 122, 101), (237, 145, 124), (239, 178, 146), (248, 199, 178), (255, 230, 230), (215, 225, 255), (150, 210, 255), (50, 190, 255), (20, 150, 255), (9, 118, 240), (4, 75, 185), ( 0, 40, 140), (0, 128, 0), (59, 179, 59)],
              'clevls': np.linspace(0.,100.,21) }
    return cdict

def make_cmap( cdict, N=255, lvs=[] ):

    try:
        colors, clevs = cdict['colors'], cdict['clevls']
    except:
        print 'Not a valid cdict'
        return []

    ncmaps = [ (float(c[0])/N, float(c[1])/N, float(c[2])/N) for c in colors ]

    if len(lvs)>0:

        icolors = interp1d(clevs, np.array(ncmaps), axis=0, fill_value='extrapolate')
        icolors = icolors(lvs).clip(min=0.,max=1.)

        ncmaps = [ (ic[0], ic[1], ic[2]) for ic in icolors ]
        clevs = lvs

    return clevs, ListedColormap(ncmaps, name='from_list')

def cmap(rgbin, N=256):
    # rgb inputs...
    if not cbook.is_string_like(rgbin[0]):
        # normalizando entre 1 y 256...
        if rgbin.max() > 1:
            rgbin = rgbin / 256.
    return LinearSegmentedColormap.from_list('mycmap', rgbin, N=N)


# segmented color maps
def precip1():
    precip_cdict ={'red':   ((0.000, 1.000, 1.000),
                (0.004, 0.914, 0.914),
                (0.012, 0.812, 0.812),
                (0.020, 0.514, 0.514),
                (0.040, 0.227, 0.227),
                (0.060, 0.114, 0.114),
                (0.080, 0.000, 0.000),
                (0.100, 0.012, 0.012),
                (0.120, 0.020, 0.020),
                (0.160, 0.031, 0.031),
                (0.200, 0.518, 0.518),
                (0.240, 1.000, 1.000),
                (0.280, 1.000, 1.000),
                (0.320, 1.000, 1.000),
                (0.360, 1.000, 1.000),
                (0.400, 0.702, 0.702),
                (0.500, 0.490, 0.490),
                (0.600, 0.294, 0.294),
                (0.700, 0.196, 0.196),
                (0.800, 0.980, 0.980),
                (1.000, 1.000, 1.000)),
        'green':    ((0.000, 1.000, 1.000),
                (0.004, 0.800, 0.800),
                (0.012, 0.502, 0.502),
                (0.020, 0.200, 0.200),
                (0.040, 0.000, 0.000),
                (0.060, 0.000, 0.000),
                (0.080, 0.000, 0.000),
                (0.100, 0.235, 0.235),
                (0.120, 0.467, 0.467),
                (0.160, 0.702, 0.702),
                (0.200, 0.851, 0.851),
                (0.240, 1.000, 1.000),
                (0.280, 0.667, 0.667),
                (0.320, 0.227, 0.227),
                (0.360, 0.000, 0.000),
                (0.400, 0.000, 0.000),
                (0.500, 0.000, 0.000),
                (0.600, 0.000, 0.000),
                (0.700, 0.000, 0.000),
                (0.800, 0.773, 0.773),
                (1.000, 1.000, 1.000)),
        'blue':     ((0.000, 1.000, 1.000),
                (0.004, 0.976, 0.976),
                (0.012, 0.875, 0.875),
                (0.020, 0.576, 0.576),
                (0.040, 0.690, 0.690),
                (0.060, 0.843, 0.843),
                (0.080, 1.000, 1.000),
                (0.100, 0.686, 0.686),
                (0.120, 0.372, 0.372),
                (0.160, 0.059, 0.059),
                (0.200, 0.031, 0.031),
                (0.240, 0.000, 0.000),
                (0.280, 0.000, 0.000),
                (0.320, 0.000, 0.000),
                (0.360, 0.000, 0.000),
                (0.400, 0.000, 0.000),
                (0.500, 0.000, 0.000),
                (0.600, 0.000, 0.000),
                (0.700, 0.000, 0.000),
                (0.800, 0.980, 0.980),
                (1.000, 1.000, 1.000))}
    precip_coltbl = LinearSegmentedColormap('PRECIP_COLTBL',precip_cdict)
    return precip_coltbl
